#!/usr/bin/env groovy

node {
  // Set JDK in Jenkins
  jdk = tool name: 'Java1.8'
  env.JAVA_HOME = "${jdk}"

  def JAVA_HOME = '/opt/java/jdk1.8.0_161/'

  // Set JDK in the Environment
  withEnv(["PATH=${JAVA_HOME}/bin:${PATH}"]) {
    stage('set environment variables') {
      echo "$JAVA_HOME"
      echo "$PATH"
    }

    stage('check environment variables') {
      echo "Path variable: $PATH"
      echo "Java Home variable: $JAVA_HOME"
      sh 'java -version'
    }

    stage('checkout project') {
      checkout scm
    }

    stage('clean project') {
      sh "chmod +x mvnw"
      sh "./mvnw -s /opt/maven/maven/conf/settings.xml clean"
    }

    stage('install node and npm tools') {
      sh "./mvnw -s /opt/maven/maven/conf/settings.xml com.github.eirslett:frontend-maven-plugin:install-node-and-npm -DnodeVersion=v10.15.0 -DnpmVersion=6.4.1"
    }

    stage('npm install') {
      sh "./mvnw -s /opt/maven/maven/conf/settings.xml com.github.eirslett:frontend-maven-plugin:npm"
    }

    stage('run backend tests') {
      try {
        sh "./mvnw -s /opt/maven/maven/conf/settings.xml test"
      } catch (err) {
        throw err
     // } finally {
     //   junit '**/target/surefire-reports/TEST-*.xml'
      }
    }

    stage('run frontend tests') {
      try {
        sh "./mvnw -s /opt/maven/maven/conf/settings.xml com.github.eirslett:frontend-maven-plugin:npm -Dfrontend.npm.arguments='run test'"
      } catch (err) {
        throw err
      //} finally {
      //  junit '**/target/test-results/TESTS-*.xml'
      }
    }

    stage('build and package project') {
      sh "./mvnw -s /opt/maven/maven/conf/settings.xml verify -Pprod -DskipTests"
      archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
    }

    stage('sonarqube quality analysis') {
      sh "cp /var/lib/jenkins/build-scripts/appdash-sonar-dev.bash ."
      sh "./appdash-sonar-dev.bash"
    }

    stage('build docker image') {
      sh "cp /var/lib/jenkins/build-scripts/Dockerfile ./target"
      sh "" +
        ""
    }

    stage('restart containers') {
      sh "/usr/local/bin/docker-compose -f /root/fusion-dashboard/docker-compose.yml down"
      sh "/usr/local/bin/docker-compose -f /root/fusion-dashboard/docker-compose.yml up -d"
    }
  }
}
